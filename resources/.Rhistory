load("C:/Users/HP/OneDrive/Documents/GitHub/Pathogen-Data-Analysis-Training/scripts/.RData")
# Load libraries
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
library(readxl)
library(here)
library(tidyverse)
library(dplyr)
library(quantitray)
library(readxl)
# Test - AVOID DOING THIS!!! everyone has different file paths so if someone else uses this script with your filepath included, it will be more work for them to change all of the filepaths in the script
# test <- read_csv("C:/Users/hkamato/Documents/GitHub/DHKUH Data Analysis Training/simulated_data/survey_data_simulated.csv")
# Read microbiological data
# (there are also packages you can install and load, like read_xl(), for reading .xlsx files)
microbio_df <- read_csv(here("simulated_data", "microbial_data_simulated.csv"))
# Folder path for TAC .csvs
tac_folder <- here("simulated_data", "simulated_cards")
# Read and combine all TAC .xlsx output files into tac_raw
tac_raw <- list.files(tac_folder, full.names = TRUE, pattern = "\\.xlsx$") %>%
map_dfr(read_csv, .id = "source_file", show_col_types = FALSE)
## MICROBIAL DATA
#### Check micro (IDEXX) data format
```{r micro.check}
## MICROBIAL DATA
#### Check micro (IDEXX) data format
```{r micro.check}
## MICROBIAL DATA
#### Check micro (IDEXX) data format
```{r micro.check}
## MICROBIAL DATA
#### Check micro (IDEXX) data format
```{r micro.check}
## MICROBIAL DATA
#### Check micro (IDEXX) data format
```{r micro.check}
View(microbio_df)
View(microbio_df)
## MICROBIAL DATA
#### Check micro (IDEXX) data format
```{r micro.check}
# Read microbiological data
# (there are also packages you can install and load, like read_xl(), for reading .xlsx files)
microbio_df <- read_csv(here("simulated_data", "microbial_data_simulated.csv"))
# Read microbiological data
# (there are also packages you can install and load, like read_xl(), for reading .xlsx files)
microbio_df <- read_csv(here("simulated_data", "microbial_data_simulated.csv"))
# Folder path for TAC .csvs
tac_folder <- here("simulated_data", "simulated_cards")
# Read and combine all TAC .xlsx output files into tac_raw
tac_raw <- list.files(tac_folder, full.names = TRUE, pattern = "\\.xlsx$") %>%
map_dfr(read_csv, .id = "source_file", show_col_types = FALSE)
## MICROBIAL DATA
#### Check micro (IDEXX) data format
```{r micro.check}
## MICROBIAL DATA
#### Check micro (IDEXX) data format
```{r micro.check}
## MICROBIAL DATA
#### Check micro (IDEXX) data format
```{r micro.check}
## MICROBIAL DATA
#### Check micro (IDEXX) data format
```{r micro.check}
View(microbio_df)
View(microbio_df)
```{r micro.check}
## MICROBIAL DATA
#### Check micro (IDEXX) data format
names(microbio_df)
```{r micro.check}
## MICROBIAL DATA
#### Check micro (IDEXX) data format
names(microbio_df)
```{r}
names(microbio_df) # variable names
summary(microbio_df) # summary of data
head(microbio_df, n=8) # view top 8 rows
unique(microbio_df$sample_id) %>% length(.) # number of samples
table(microbio_df$sample_type) # number of rows in dataset by type
## MICROBIAL DATA
#### Check micro (IDEXX) data format
names(microbio_df)
```{r }
## MICROBIAL DATA
#### Check micro (IDEXX) data format
```{r micro.check}
# Add code here to view data
View(microbio_df)
## MICROBIAL DATA
#### Check micro (IDEXX) data format
```{r micro.check}
## MICROBIAL DATA
#### Check micro (IDEXX) data format
```{r micro.check}
names(microbio_df) # variable names
summary(microbio_df) # summary of data
head(microbio_df, n=8) # view top 8 rows
unique(microbio_df$sample_id) %>% length(.) # number of samples
table(microbio_df$sample_type) # number of rows in dataset by type
## MICROBIAL DATA
#### Check micro (IDEXX) data format
```{r micro.check}
## MICROBIAL DATA
#### Check micro (IDEXX) data format
```{r micro.check}
microbio_clean <- microbio_df %>%
mutate(
household_id = str_extract(sample_id, "HH\\d+"), # extract household id from sample_id
sample_type = str_extract(sample_id, "effluent|compost|produce"), # extract sample type from sample_id
wet_soil_mass = wet_weight - plate_weight,
dry_soil_mass = dry_weight - plate_weight,
soil_moisture = (wet_soil_mass - dry_soil_mass) / dry_soil_mass *100 # estimate soil moisture content as percent
) %>%
dplyr::select(-c(sample_id, plate_weight, wet_weight, dry_weight, wet_soil_mass, dry_soil_mass))
names(microbio_clean)
microbio_clean <- microbio_clean %>%
mutate(
# Add total coliform and E. coli MPN estimation (with 95% confidence limits) code here
# Total coliform
tc_mpn = quantify_mpn(total_coliform_large_cell_count, total_coliform_small_cell_count,
method = "qt-2000"),
tc_mpn_lo = quantify_95lo(total_coliform_large_cell_count, total_coliform_small_cell_count,
method = "qt-2000"),
tc_mpn_hi = quantify_95hi(total_coliform_large_cell_count, total_coliform_small_cell_count,
method = "qt-2000"),
# add here
ecoli_mpn = quantify_mpn(e_coli_large_cell_count, e_coli_small_cell_count,
method = "qt-2000"),
ecoli_mpn_lo = quantify_95lo(e_coli_large_cell_count, e_coli_small_cell_count,
method = "qt-2000"),
ecoli_mpn_hi = quantify_95hi(e_coli_large_cell_count, e_coli_small_cell_count,
method = "qt-2000"),
ar_tc_mpn =quantify_mpn(ar_total_coliform_large_cell_count, ar_total_coliform_small_cell_count,
method = "qt-2000"),
ar_tc_mpn_lo = quantify_95lo(ar_total_coliform_large_cell_count, ar_total_coliform_small_cell_count,
method = "qt-2000"),
ar_tc_mpn_hi = quantify_95hi(ar_total_coliform_large_cell_count, ar_total_coliform_small_cell_count,
method = "qt-2000"),
ar_ecoli_mpn = quantify_mpn(e_coli_large_cell_count, e_coli_small_cell_count,
method = "qt-2000"),
ar_ecoli_mpn_lo = quantify_95lo(e_coli_large_cell_count, e_coli_small_cell_count,
method = "qt-2000"),
ar_ecoli_mpn_hi = quantify_95hi(e_coli_large_cell_count, e_coli_small_cell_count,
method = "qt-2000"),
)
```
View(microbio_clean)
View(microbio_clean)
microbio_clean_v2 <- microbio_clean %>%
mutate(
# Add total coliform and E. coli MPN estimation (with 95% confidence limits) code here
# Total coliform
tc_mpn = quantify_mpn(total_coliform_large_cell_count, total_coliform_small_cell_count,
method = "qt-2000"),
tc_mpn_lo = quantify_95lo(total_coliform_large_cell_count, total_coliform_small_cell_count,
method = "qt-2000"),
tc_mpn_hi = quantify_95hi(total_coliform_large_cell_count, total_coliform_small_cell_count,
method = "qt-2000"),
# add here
ecoli_mpn = quantify_mpn(e_coli_large_cell_count, e_coli_small_cell_count,
method = "qt-2000"),
ecoli_mpn_lo = quantify_95lo(e_coli_large_cell_count, e_coli_small_cell_count,
method = "qt-2000"),
ecoli_mpn_hi = quantify_95hi(e_coli_large_cell_count, e_coli_small_cell_count,
method = "qt-2000"),
ar_tc_mpn =quantify_mpn(ar_total_coliform_large_cell_count, ar_total_coliform_small_cell_count,
method = "qt-2000"),
ar_tc_mpn_lo = quantify_95lo(ar_total_coliform_large_cell_count, ar_total_coliform_small_cell_count,
method = "qt-2000"),
ar_tc_mpn_hi = quantify_95hi(ar_total_coliform_large_cell_count, ar_total_coliform_small_cell_count,
method = "qt-2000"),
ar_ecoli_mpn = quantify_mpn(e_coli_large_cell_count, e_coli_small_cell_count,
method = "qt-2000"),
ar_ecoli_mpn_lo = quantify_95lo(e_coli_large_cell_count, e_coli_small_cell_count,
method = "qt-2000"),
ar_ecoli_mpn_hi = quantify_95hi(e_coli_large_cell_count, e_coli_small_cell_count,
method = "qt-2000")
)
```{r mpn.check}
```{r mpn.check}
View(microbio_clean_v2)
```{r mpn.nafix}
```{r mpn.nafix}
microbio_clean <- microbio_clean %>%
mutate(
across(everything(), ~replace_na(.x, 0)), # replace NAs with 0s across all variables in dataframe
tc_detect = if_else(tc_mpn > 0, 1, 0), # set detect = 1 if mpn > 0
ar_tc_detect = if_else(ar_tc_mpn > 0, 1, 0),
ec_detect = if_else(ecoli_mpn > 0, 1, 0),
ar_ec_detect = if_else(ar_ecoli_mpn > 0, 1, 0)
)
tabel(microbio_clean$tc_detect)
#### Transform ESBL CFU results
Plate count data for ESBL-E. coli should be adjusted for moisture content and sample volume (for effluent and compost samples only), and should be log-transformed to create a normal (bell-curve) distribution for statistical analyses.
hist(microbio_clean$esbl_e_coli_cfu) # check distribution with histogram
#### Transform ESBL CFU results
Plate count data for ESBL-E. coli should be adjusted for moisture content and sample volume (for effluent and compost samples only), and should be log-transformed to create a normal (bell-curve) distribution for statistical analyses.
log_adjusted_esbl_cfu = log10 (adjusted_esbl_cfu)
hist(microbio_clean2$log_adjusted_esbl_cfu)
hist(microbio_clean2$log_adjusted_esbl_cfu)
```{r adjust.esbl.task}
microbio_clean2 <- microbio_clean %>%
mutate(
moisture_fraction = soil_moisture / 100,
esbl_e_coli_cfu_adj = if_else(esbl_e_coli_cfu == 0, 0.5, esbl_e_coli_cfu), # set 0s to 1/2 lower limit of detection (1 CFU)
adjusted_esbl_cfu = case_when( # for
sample_type %in% c("effluent", "compost") ~ esbl_e_coli_cfu_adj / (1 - moisture_fraction) / 2,
sample_type == "produce" ~ esbl_e_coli_cfu_adj,
TRUE ~ NA_real_),
# Add code to create new log_adjusted_esbl_cfu variable here
log_adjusted_esbl_cfu = log10 (adjusted_esbl_cfu)
)
hist(microbio_clean2$log_adjusted_esbl_cfu)
ggplot(microbio_clean2, aes(x = log_adjusted_esbl_cfu, fill = sample_type)) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
theme_minimal()
across(matches("^adjusted_.*_adj$"), ~ log10(.) + 1, .names + log_{.col}")
microbio_clean2 <- microbio_clean2 %>%
mutate(
# Add adjustments for LOD, moisture, and sample volume for compost and effluent samples
across(c(tc_mpn, ar_tc_mpn, ecoli_mpn, ar_ecoli_mpn),
~ if_else(. == 0, 0.5, .), # set 0s to 1/2 lower limit of detection (1 MPN)
.names = "{.col}_adj")) %>% # add "_adj" to the end of each new variable name
mutate(
across(matches("_adj$"), # only for variables that end in "adj"
~ if_else(sample_type %in% c("compost", "effluent"), . / (1 - moisture_fraction) / 2, . / 2),
.names = "adjusted_{.col}")) %>%
# Add code to create new log10-transormed variables for all adjusted MPN variables here
mutate(
across(matches("^adjusted_.*_adj$"), ~ log10(.) + 1, .names + log_{.col}")
microbio_clean2 <- microbio_clean2 %>%
mutate(
# Add adjustments for LOD, moisture, and sample volume for compost and effluent samples
across(c(tc_mpn, ar_tc_mpn, ecoli_mpn, ar_ecoli_mpn),
~ if_else(. == 0, 0.5, .), # set 0s to 1/2 lower limit of detection (1 MPN)
.names = "{.col}_adj")) %>% # add "_adj" to the end of each new variable name
mutate(
across(matches("_adj$"), # only for variables that end in "adj"
~ if_else(sample_type %in% c("compost", "effluent"), . / (1 - moisture_fraction) / 2, . / 2),
.names = "adjusted_{.col}")) %>%
# Add code to create new log10-transormed variables for all adjusted MPN variables here
mutate(
across(matches("^adjusted_.*_adj$"), ~ log10(.) + 1, .names + log_{.col}")
#### Transform MPN results
Next we will transform IDEXX MPN results. This process is similar to the above steps taken for ESBL E. coli, but now we will do this across multiple variables (each of the bacterial indicators).
microbio_clean2 <- microbio_clean2 %>%
mutate(
# Add adjustments for LOD, moisture, and sample volume for compost and effluent samples
across(c(tc_mpn, ar_tc_mpn, ecoli_mpn, ar_ecoli_mpn),
~ if_else(. == 0, 0.5, .), # set 0s to 1/2 lower limit of detection (1 MPN)
.names = "{.col}_adj")) %>% # add "_adj" to the end of each new variable name
mutate(
across(matches("_adj$"), # only for variables that end in "adj"
~ if_else(sample_type %in% c("compost", "effluent"), . / (1 - moisture_fraction) / 2, . / 2),
.names = "adjusted_{.col}")) %>%
# Add code to create new log10-transormed variables for all adjusted MPN variables here
mutate(
across(matches("^adjusted_.*_adj$"), ~ log10(.) + 1, .names = log_{.col}")
microbio_clean2 <- microbio_clean2 %>%
mutate(
# Add adjustments for LOD, moisture, and sample volume for compost and effluent samples
across(c(tc_mpn, ar_tc_mpn, ecoli_mpn, ar_ecoli_mpn),
~ if_else(. == 0, 0.5, .), # set 0s to 1/2 lower limit of detection (1 MPN)
.names = "{.col}_adj")) %>% # add "_adj" to the end of each new variable name
mutate(
across(matches("_adj$"), # only for variables that end in "adj"
~ if_else(sample_type %in% c("compost", "effluent"), . / (1 - moisture_fraction) / 2, . / 2),
.names = "adjusted_{.col}")) %>%
# Add code to create new log10-transormed variables for all adjusted MPN variables here
mutate(
across(matches("^adjusted_.*_adj$"), ~ log10(.) + 1, .names = "log_{.col}")
)
hist(microbio_clean2$log_adjusted_ecoli_mpn_adj)
hist(microbio_clean2$log_adjusted_esbl_e_coli_mcfu_adj)
hist(microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj)
hist(microbio_clean2$log_adjusted_ecoli_mpn_adj) <-
hist(microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj) +1
hist(microbio_clean2$log_adjusted_ecoli_cfu_adj) <-
hist(microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj) +1
hist(microbio_clean2$log_adjusted_e_coli_cfu_adj) <-
hist(microbio_clean2$log_adjusted_e_coli_cfu_adj) +1
hist(microbio_clean2$log_adjusted-esbl_e_coli_cfu_adj) <-
hist(microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj) +1
hist(microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj) <-
hist(microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj) +1
hist(microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj) <-
hist(microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj) + 1
hist(microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj) <-
hist(microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj) + 1
microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj) <-
microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj)<-
microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj<-
microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj+1
hist(microbio_clean2$log_adjusted_ecoli_mpn_adj)
hist(microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj)
# Add code to check distribution of unadjusted vs. adjusted MPN variables using a histogram here
hist(microbio_clean2$log_adjusted_ecoli_mpn_adj)
hist(microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj)
microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj<-
microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj+1
```
print("test")
```
# Add code to check distribution of unadjusted vs. adjusted MPN variables using a histogram here
hist(microbio_clean2$log_adjusted_ecoli_mpn_adj)
hist(microbio_clean2$log_adjusted_esbl_e_coli_cfu_adj)
_table(microbio_clean2$sample_type)
table(microbio_clean2$sample_type)
```
## TAC DATA
#### Check TAC data format
```{r tac.check}
#### Transform MPN results
Next we will transform IDEXX MPN results. This process is similar to the above steps taken for ESBL E. coli, but now we will do this across multiple variables (each of the bacterial indicators).
